{"ast":null,"code":"import _objectSpread from \"D:/Apteka Vue/Pharmacy-main/Pharmacy-main/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { defineComponent, ref, inject, onMounted } from 'vue';\nimport tippy, { roundArrow, animateFill } from 'tippy.js';\nexport default defineComponent({\n  props: {\n    to: {\n      type: String,\n      default: 'span'\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup: function setup(props) {\n    var tippyRef = ref();\n\n    var init = function init() {\n      tippy(\"[name=\\\"\".concat(props.to, \"\\\"]\"), _objectSpread({\n        plugins: [animateFill],\n        content: tippyRef.value,\n        allowHTML: true,\n        arrow: roundArrow,\n        popperOptions: {\n          modifiers: [{\n            name: 'preventOverflow',\n            options: {\n              rootBoundary: 'viewport'\n            }\n          }]\n        },\n        animateFill: false,\n        animation: 'shift-away',\n        theme: 'light',\n        trigger: 'click'\n      }, props.options));\n    };\n\n    var bindInstance = function bindInstance() {\n      if (props.refKey) {\n        var bind = inject(\"bind[\".concat(props.refKey, \"]\"));\n\n        if (bind) {\n          bind(tippyRef.value);\n        }\n      }\n    };\n\n    onMounted(function () {\n      init();\n      bindInstance();\n    });\n    return {\n      tippyRef: tippyRef\n    };\n  }\n});","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\tippy-content\\Main.vue"],"names":[],"mappings":";AAOA,SAAS,eAAT,EAA0B,GAA1B,EAA+B,MAA/B,EAAuC,SAAvC,QAAwD,KAAxD;AACA,OAAO,KAAP,IAAgB,UAAhB,EAA4B,WAA5B,QAA+C,UAA/C;AAEA,eAAe,eAAe,CAAC;AAC7B,EAAA,KAAK,EAAE;AACL,IAAA,EAAE,EAAE;AACF,MAAA,IAAI,EAAE,MADJ;AAEF,MAAA,OAAO,EAAE;AAFP,KADC;AAKL,IAAA,OAAO,EAAE;AACP,MAAA,IAAI,EAAE,MADC;AAEP,MAAA,OAAO,EAAE;AAAA,eAAO,EAAP;AAAA;AAFF,KALJ;AASL,IAAA,MAAM,EAAE;AACN,MAAA,IAAI,EAAE,MADA;AAEN,MAAA,OAAO,EAAE;AAFH;AATH,GADsB;AAe7B,EAAA,KAf6B,iBAevB,KAfuB,EAehB;AACX,QAAM,QAAO,GAAI,GAAG,EAApB;;AACA,QAAM,IAAG,GAAI,SAAP,IAAO,GAAM;AACjB,MAAA,KAAK,mBAAW,KAAK,CAAC,EAAjB;AACH,QAAA,OAAO,EAAE,CAAC,WAAD,CADN;AAEH,QAAA,OAAO,EAAE,QAAQ,CAAC,KAFf;AAGH,QAAA,SAAS,EAAE,IAHR;AAIH,QAAA,KAAK,EAAE,UAJJ;AAKH,QAAA,aAAa,EAAE;AACb,UAAA,SAAS,EAAE,CACT;AACE,YAAA,IAAI,EAAE,iBADR;AAEE,YAAA,OAAO,EAAE;AACP,cAAA,YAAY,EAAE;AADP;AAFX,WADS;AADE,SALZ;AAeH,QAAA,WAAW,EAAE,KAfV;AAgBH,QAAA,SAAS,EAAE,YAhBR;AAiBH,QAAA,KAAK,EAAE,OAjBJ;AAkBH,QAAA,OAAO,EAAE;AAlBN,SAmBA,KAAK,CAAC,OAnBN,EAAL;AAqBF,KAtBA;;AAwBA,QAAM,YAAW,GAAI,SAAf,YAAe,GAAM;AACzB,UAAI,KAAK,CAAC,MAAV,EAAkB;AAChB,YAAM,IAAG,GAAI,MAAM,gBAAS,KAAK,CAAC,MAAf,OAAnB;;AACA,YAAI,IAAJ,EAAU;AACR,UAAA,IAAI,CAAC,QAAQ,CAAC,KAAV,CAAJ;AACF;AACF;AACF,KAPA;;AASA,IAAA,SAAS,CAAC,YAAM;AACd,MAAA,IAAI;AACJ,MAAA,YAAY;AACb,KAHQ,CAAT;AAKA,WAAO;AACL,MAAA,QAAO,EAAP;AADK,KAAP;AAGF;AA1D6B,CAAD,CAA9B","sourcesContent":["<template>\n  <div ref=\"tippyRef\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, inject, onMounted } from 'vue'\nimport tippy, { roundArrow, animateFill } from 'tippy.js'\n\nexport default defineComponent({\n  props: {\n    to: {\n      type: String,\n      default: 'span'\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const tippyRef = ref()\n    const init = () => {\n      tippy(`[name=\"${props.to}\"]`, {\n        plugins: [animateFill],\n        content: tippyRef.value,\n        allowHTML: true,\n        arrow: roundArrow,\n        popperOptions: {\n          modifiers: [\n            {\n              name: 'preventOverflow',\n              options: {\n                rootBoundary: 'viewport'\n              }\n            }\n          ]\n        },\n        animateFill: false,\n        animation: 'shift-away',\n        theme: 'light',\n        trigger: 'click',\n        ...props.options\n      })\n    }\n\n    const bindInstance = () => {\n      if (props.refKey) {\n        const bind = inject(`bind[${props.refKey}]`)\n        if (bind) {\n          bind(tippyRef.value)\n        }\n      }\n    }\n\n    onMounted(() => {\n      init()\n      bindInstance()\n    })\n\n    return {\n      tippyRef\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}