{"ast":null,"code":"import { renderSlot as _renderSlot, resolveDynamicComponent as _resolveDynamicComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createBlock(_resolveDynamicComponent(_ctx.tag), {\n    ref: \"tippyRef\"\n  }, {\n    default: _withCtx(function () {\n      return [_renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n    /* FORWARDED */\n\n  }, 512\n  /* NEED_PATCH */\n  );\n}","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\tippy\\Main.vue"],"names":[],"mappings":";;uBACE,YAAA,CAEY,wBAAA,CAFI,IAAA,CAAA,GAEJ,CAFZ,EAAmB;AAAE,IAAA,GAAG,EAAC;AAAN,GAAnB,EAAmC;sBACjC;AAAA,aAAa,CAAb,WAAA,CAAa,IAAA,CAAA,MAAb,EAAa,SAAb,CAAa,CAAb;AAAA,K,CADiC;;;;AAAA,GAAnC,E;;AAAA,G","sourcesContent":["<template>\n  <component :is=\"tag\" ref=\"tippyRef\">\n    <slot></slot>\n  </component>\n</template>\n\n<script>\nimport { defineComponent, ref, inject, onMounted } from 'vue'\nimport tippy, { roundArrow, animateFill } from 'tippy.js'\n\nexport default defineComponent({\n  props: {\n    content: {\n      type: String,\n      required: true\n    },\n    tag: {\n      type: String,\n      default: 'span'\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const tippyRef = ref()\n    const init = () => {\n      tippy(tippyRef.value, {\n        plugins: [animateFill],\n        content: props.content,\n        arrow: roundArrow,\n        popperOptions: {\n          modifiers: [\n            {\n              name: 'preventOverflow',\n              options: {\n                rootBoundary: 'viewport'\n              }\n            }\n          ]\n        },\n        animateFill: false,\n        animation: 'shift-away',\n        ...props.options\n      })\n    }\n\n    const bindInstance = () => {\n      if (props.refKey) {\n        const bind = inject(`bind[${props.refKey}]`)\n        if (bind) {\n          bind(tippyRef.value)\n        }\n      }\n    }\n\n    onMounted(() => {\n      init()\n      bindInstance()\n    })\n\n    return {\n      tippyRef\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}