{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_Chart = _resolveComponent(\"Chart\");\n\n  return _openBlock(), _createBlock(_component_Chart, {\n    type: \"bar\",\n    width: _ctx.width,\n    height: _ctx.height,\n    data: _ctx.data,\n    options: _ctx.options\n  }, null, 8\n  /* PROPS */\n  , [\"width\", \"height\", \"data\", \"options\"]);\n}","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\components\\stacked-bar-chart-1\\Main.vue"],"names":[],"mappings":";;;;uBACE,YAAA,CAME,gBANF,EAME;AALA,IAAA,IAAI,EAAC,KAKL;AAJC,IAAA,KAAK,EAAE,IAAA,CAAA,KAIR;AAHC,IAAA,MAAM,EAAE,IAAA,CAAA,MAGT;AAFC,IAAA,IAAI,EAAE,IAAA,CAAA,IAEP;AADC,IAAA,OAAO,EAAE,IAAA,CAAA;AACV,GANF,E,IAAA,E;;AAAA,I,sCAAA,C","sourcesContent":["<template>\n  <Chart\n    type=\"bar\"\n    :width=\"width\"\n    :height=\"height\"\n    :data=\"data\"\n    :options=\"options\"\n  />\n</template>\n\n<script>\nimport { defineComponent, computed } from 'vue'\nimport { helper as $h } from '@/utils/helper'\n\nexport default defineComponent({\n  props: {\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    }\n  },\n  setup() {\n    const data = computed(() => {\n      return {\n        labels: [...Array(16).keys()],\n        datasets: [\n          {\n            label: 'Html Template',\n            barPercentage: 0.5,\n            barThickness: 6,\n            maxBarThickness: 8,\n            minBarLength: 2,\n            backgroundColor: '#3160D8',\n            data: $h.randomNumbers(-100, 100, 16)\n          },\n          {\n            label: 'VueJs Template',\n            barPercentage: 0.5,\n            barThickness: 6,\n            maxBarThickness: 8,\n            minBarLength: 2,\n            backgroundColor: '#cbd5e0',\n            data: $h.randomNumbers(-100, 100, 16)\n          }\n        ]\n      }\n    })\n    const options = computed(() => {\n      return {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [\n            {\n              stacked: true,\n              ticks: {\n                fontSize: '12',\n                fontColor: '#777777'\n              },\n              gridLines: {\n                display: false\n              }\n            }\n          ],\n          yAxes: [\n            {\n              stacked: true,\n              ticks: {\n                fontSize: '12',\n                fontColor: '#777777',\n                callback: function(value) {\n                  return '$' + value\n                }\n              },\n              gridLines: {\n                color: '#D8D8D8',\n                zeroLineColor: '#D8D8D8',\n                borderDash: [2, 2],\n                zeroLineBorderDash: [2, 2],\n                drawBorder: false\n              }\n            }\n          ]\n        }\n      }\n    })\n\n    return {\n      data,\n      options\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}