{"ast":null,"code":"import _objectSpread from \"D:/Apteka Vue/Pharmacy-main/Pharmacy-main/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { defineComponent, computed, watch } from 'vue';\nimport { setValue, init, reInit } from './index';\nexport default defineComponent({\n  directives: {\n    select: {\n      mounted: function mounted(el, _ref) {\n        var value = _ref.value;\n        // Clone the select element to prevent tom select remove the original element\n        var clonedEl = cash(el).clone().insertAfter(el)[0];\n        cash(el).attr('hidden', true); // Initialize tom select\n\n        setValue(clonedEl, value.props);\n        init(clonedEl, value.emit, value.computedOptions);\n      },\n      updated: function updated(el, _ref2) {\n        var value = _ref2.value;\n        var clonedEl = cash(el).next()[0];\n        setValue(clonedEl, value.props);\n        reInit(clonedEl, value.props, value.emit, value.computedOptions);\n      }\n    }\n  },\n  props: {\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    modelValue: {\n      type: [String, Number, Array],\n      default: ''\n    }\n  },\n  setup: function setup(props, context) {\n    // Compute all default options\n    var computedOptions = computed(function () {\n      var options = _objectSpread(_objectSpread({}, props.options), {}, {\n        plugins: _objectSpread({\n          dropdown_input: {}\n        }, props.options.plugins)\n      });\n\n      if (Array.isArray(props.modelValue)) {\n        options = _objectSpread(_objectSpread({\n          persist: false,\n          create: true,\n          onDelete: function onDelete(values) {\n            return confirm(values.length > 1 ? 'Are you sure you want to remove these ' + values.length + ' items?' : 'Are you sure you want to remove \"' + values[0] + '\"?');\n          }\n        }, options), {}, {\n          plugins: _objectSpread({\n            remove_button: {\n              title: 'Remove this item'\n            }\n          }, options.plugins)\n        });\n      }\n\n      return options;\n    }); // Watch value change\n\n    watch(computed(function () {\n      return props.modelValue;\n    }), function () {\n      context.emit('change');\n    });\n    return _objectSpread(_objectSpread({\n      props: props\n    }, context), {}, {\n      computedOptions: computedOptions\n    });\n  }\n});","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\tom-select\\Main.vue"],"names":[],"mappings":";;AAOA,SAAS,eAAT,EAA0B,QAA1B,EAAoC,KAApC,QAAiD,KAAjD;AACA,SAAS,QAAT,EAAmB,IAAnB,EAAyB,MAAzB,QAAuC,SAAvC;AAEA,eAAe,eAAe,CAAC;AAC7B,EAAA,UAAU,EAAE;AACV,IAAA,MAAM,EAAE;AACN,MAAA,OADM,mBACE,EADF,QACiB;AAAA,YAAT,KAAS,QAAT,KAAS;AACrB;AACA,YAAM,QAAO,GAAI,IAAI,CAAC,EAAD,CAAJ,CACd,KADc,GAEd,WAFc,CAEF,EAFE,EAEE,CAFF,CAAjB;AAGA,QAAA,IAAI,CAAC,EAAD,CAAJ,CAAS,IAAT,CAAc,QAAd,EAAwB,IAAxB,EALqB,CAOrB;;AACA,QAAA,QAAQ,CAAC,QAAD,EAAW,KAAK,CAAC,KAAjB,CAAR;AACA,QAAA,IAAI,CAAC,QAAD,EAAW,KAAK,CAAC,IAAjB,EAAuB,KAAK,CAAC,eAA7B,CAAJ;AACD,OAXK;AAYN,MAAA,OAZM,mBAYE,EAZF,SAYiB;AAAA,YAAT,KAAS,SAAT,KAAS;AACrB,YAAM,QAAO,GAAI,IAAI,CAAC,EAAD,CAAJ,CAAS,IAAT,GAAgB,CAAhB,CAAjB;AACA,QAAA,QAAQ,CAAC,QAAD,EAAW,KAAK,CAAC,KAAjB,CAAR;AACA,QAAA,MAAM,CAAC,QAAD,EAAW,KAAK,CAAC,KAAjB,EAAwB,KAAK,CAAC,IAA9B,EAAoC,KAAK,CAAC,eAA1C,CAAN;AACF;AAhBM;AADE,GADiB;AAqB7B,EAAA,KAAK,EAAE;AACL,IAAA,OAAO,EAAE;AACP,MAAA,IAAI,EAAE,MADC;AAEP,MAAA,OAFO,sBAEG;AACR,eAAO,EAAP;AACF;AAJO,KADJ;AAOL,IAAA,UAAU,EAAE;AACV,MAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,KAAjB,CADI;AAEV,MAAA,OAAO,EAAE;AAFC;AAPP,GArBsB;AAiC7B,EAAA,KAjC6B,iBAiCvB,KAjCuB,EAiChB,OAjCgB,EAiCP;AACpB;AACA,QAAM,eAAc,GAAI,QAAQ,CAAC,YAAM;AACrC,UAAI,OAAM,mCACL,KAAK,CAAC,OADD;AAER,QAAA,OAAO;AACL,UAAA,cAAc,EAAE;AADX,WAEF,KAAK,CAAC,OAAN,CAAc,OAFZ;AAFC,QAAV;;AAQA,UAAI,KAAK,CAAC,OAAN,CAAc,KAAK,CAAC,UAApB,CAAJ,EAAqC;AACnC,QAAA,OAAM;AACJ,UAAA,OAAO,EAAE,KADL;AAEJ,UAAA,MAAM,EAAE,IAFJ;AAGJ,UAAA,QAAQ,EAAE,kBAAS,MAAT,EAAiB;AACzB,mBAAO,OAAO,CACZ,MAAM,CAAC,MAAP,GAAgB,CAAhB,GACI,2CACE,MAAM,CAAC,MADT,GAEE,SAHN,GAII,sCAAsC,MAAM,CAAC,CAAD,CAA5C,GAAkD,IAL1C,CAAd;AAOD;AAXG,WAYD,OAZC;AAaJ,UAAA,OAAO;AACL,YAAA,aAAa,EAAE;AACb,cAAA,KAAK,EAAE;AADM;AADV,aAIF,OAAO,CAAC,OAJN;AAbH,UAAN;AAoBF;;AAEA,aAAO,OAAP;AACD,KAjC+B,CAAhC,CAFoB,CAqCpB;;AACA,IAAA,KAAK,CACH,QAAQ,CAAC;AAAA,aAAM,KAAK,CAAC,UAAZ;AAAA,KAAD,CADL,EAEH,YAAM;AACJ,MAAA,OAAO,CAAC,IAAR,CAAa,QAAb;AACF,KAJG,CAAL;AAOA;AACE,MAAA,KAAK,EAAL;AADF,OAEK,OAFL;AAGE,MAAA,eAAc,EAAd;AAHF;AAKF;AAnF6B,CAAD,CAA9B","sourcesContent":["<template>\n  <select v-select=\"{ props, emit, computedOptions }\" class=\"tom-select\">\n    <slot></slot>\n  </select>\n</template>\n\n<script>\nimport { defineComponent, computed, watch } from 'vue'\nimport { setValue, init, reInit } from './index'\n\nexport default defineComponent({\n  directives: {\n    select: {\n      mounted(el, { value }) {\n        // Clone the select element to prevent tom select remove the original element\n        const clonedEl = cash(el)\n          .clone()\n          .insertAfter(el)[0]\n        cash(el).attr('hidden', true)\n\n        // Initialize tom select\n        setValue(clonedEl, value.props)\n        init(clonedEl, value.emit, value.computedOptions)\n      },\n      updated(el, { value }) {\n        const clonedEl = cash(el).next()[0]\n        setValue(clonedEl, value.props)\n        reInit(clonedEl, value.props, value.emit, value.computedOptions)\n      }\n    }\n  },\n  props: {\n    options: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    modelValue: {\n      type: [String, Number, Array],\n      default: ''\n    }\n  },\n  setup(props, context) {\n    // Compute all default options\n    const computedOptions = computed(() => {\n      let options = {\n        ...props.options,\n        plugins: {\n          dropdown_input: {},\n          ...props.options.plugins\n        }\n      }\n\n      if (Array.isArray(props.modelValue)) {\n        options = {\n          persist: false,\n          create: true,\n          onDelete: function(values) {\n            return confirm(\n              values.length > 1\n                ? 'Are you sure you want to remove these ' +\n                    values.length +\n                    ' items?'\n                : 'Are you sure you want to remove \"' + values[0] + '\"?'\n            )\n          },\n          ...options,\n          plugins: {\n            remove_button: {\n              title: 'Remove this item'\n            },\n            ...options.plugins\n          }\n        }\n      }\n\n      return options\n    })\n\n    // Watch value change\n    watch(\n      computed(() => props.modelValue),\n      () => {\n        context.emit('change')\n      }\n    )\n\n    return {\n      props,\n      ...context,\n      computedOptions\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}