{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  ref: \"chartRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"canvas\", _hoisted_1, null, 512\n  /* NEED_PATCH */\n  );\n}","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\chart\\Main.vue"],"names":[],"mappings":";;AACU,EAAA,GAAG,EAAC;;;uBAAZ,mBAAA,CAAgC,QAAhC,EAAA,UAAA,EAAgC,IAAhC,EAAgC;AAAA;AAAhC,G","sourcesContent":["<template>\n  <canvas ref=\"chartRef\"></canvas>\n</template>\n\n<script>\nimport { defineComponent, onMounted, ref, inject, watch } from 'vue'\nimport { helper as $h } from '@/utils/helper'\nimport Chart from 'chart.js'\n\nexport default defineComponent({\n  props: {\n    type: {\n      type: String,\n      required: true,\n      default: 'line',\n      validator: value => {\n        return ['line', 'pie', 'doughnut', 'bar'].indexOf(value) !== -1\n      }\n    },\n    data: {\n      type: Object,\n      required: true,\n      default: () => ({})\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const chartRef = ref()\n    const init = () => {\n      const canvas = chartRef.value?.getContext('2d')\n      const chart = new Chart(canvas, {\n        type: props.type,\n        data: $h.toRaw(props.data),\n        options: props.options\n      })\n\n      watch(props, () => {\n        chart.data = $h.toRaw(props.data)\n        chart.options = props.options\n        chart.update()\n      })\n\n      // Attach ChartJs instance\n      chartRef.value.instance = chart\n    }\n\n    const setSize = () => {\n      if (props.width) {\n        cash(chartRef.value).attr({\n          width: props.width\n        })\n      }\n\n      if (props.height) {\n        cash(chartRef.value).attr({\n          height: props.height\n        })\n      }\n    }\n\n    const bindInstance = () => {\n      if (props.refKey) {\n        const bind = inject(`bind[${props.refKey}]`)\n        if (bind) {\n          bind(chartRef.value)\n        }\n      }\n    }\n\n    onMounted(() => {\n      bindInstance()\n      setSize()\n      init()\n    })\n\n    return {\n      chartRef\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}