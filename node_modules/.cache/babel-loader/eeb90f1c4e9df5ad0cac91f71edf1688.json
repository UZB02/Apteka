{"ast":null,"code":"import { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  ref: \"tippyRef\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\")], 512\n  /* NEED_PATCH */\n  );\n}","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\tippy-content\\Main.vue"],"names":[],"mappings":";;AACO,EAAA,GAAG,EAAC;;;uBAAT,mBAAA,CAEM,KAFN,EAAA,UAAA,EAEM,CADJ,WAAA,CAAa,IAAA,CAAA,MAAb,EAAa,SAAb,CACI,CAFN,E;;AAAA,G","sourcesContent":["<template>\n  <div ref=\"tippyRef\">\n    <slot></slot>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, ref, inject, onMounted } from 'vue'\nimport tippy, { roundArrow, animateFill } from 'tippy.js'\n\nexport default defineComponent({\n  props: {\n    to: {\n      type: String,\n      default: 'span'\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const tippyRef = ref()\n    const init = () => {\n      tippy(`[name=\"${props.to}\"]`, {\n        plugins: [animateFill],\n        content: tippyRef.value,\n        allowHTML: true,\n        arrow: roundArrow,\n        popperOptions: {\n          modifiers: [\n            {\n              name: 'preventOverflow',\n              options: {\n                rootBoundary: 'viewport'\n              }\n            }\n          ]\n        },\n        animateFill: false,\n        animation: 'shift-away',\n        theme: 'light',\n        trigger: 'click',\n        ...props.options\n      })\n    }\n\n    const bindInstance = () => {\n      if (props.refKey) {\n        const bind = inject(`bind[${props.refKey}]`)\n        if (bind) {\n          bind(tippyRef.value)\n        }\n      }\n    }\n\n    onMounted(() => {\n      init()\n      bindInstance()\n    })\n\n    return {\n      tippyRef\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}