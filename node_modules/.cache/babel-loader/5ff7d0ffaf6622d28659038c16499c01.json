{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport { defineComponent, onMounted, ref, inject, watch } from 'vue';\nimport { helper as $h } from '@/utils/helper';\nimport Chart from 'chart.js';\nexport default defineComponent({\n  props: {\n    type: {\n      type: String,\n      required: true,\n      default: 'line',\n      validator: function validator(value) {\n        return ['line', 'pie', 'doughnut', 'bar'].indexOf(value) !== -1;\n      }\n    },\n    data: {\n      type: Object,\n      required: true,\n      default: function _default() {\n        return {};\n      }\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup: function setup(props) {\n    var chartRef = ref();\n\n    var init = function init() {\n      var _chartRef$value;\n\n      var canvas = (_chartRef$value = chartRef.value) === null || _chartRef$value === void 0 ? void 0 : _chartRef$value.getContext('2d');\n      var chart = new Chart(canvas, {\n        type: props.type,\n        data: $h.toRaw(props.data),\n        options: props.options\n      });\n      watch(props, function () {\n        chart.data = $h.toRaw(props.data);\n        chart.options = props.options;\n        chart.update();\n      }); // Attach ChartJs instance\n\n      chartRef.value.instance = chart;\n    };\n\n    var setSize = function setSize() {\n      if (props.width) {\n        cash(chartRef.value).attr({\n          width: props.width\n        });\n      }\n\n      if (props.height) {\n        cash(chartRef.value).attr({\n          height: props.height\n        });\n      }\n    };\n\n    var bindInstance = function bindInstance() {\n      if (props.refKey) {\n        var bind = inject(\"bind[\".concat(props.refKey, \"]\"));\n\n        if (bind) {\n          bind(chartRef.value);\n        }\n      }\n    };\n\n    onMounted(function () {\n      bindInstance();\n      setSize();\n      init();\n    });\n    return {\n      chartRef: chartRef\n    };\n  }\n});","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\chart\\Main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <canvas ref=\"chartRef\"></canvas>\n</template>\n\n<script>\nimport { defineComponent, onMounted, ref, inject, watch } from 'vue'\nimport { helper as $h } from '@/utils/helper'\nimport Chart from 'chart.js'\n\nexport default defineComponent({\n  props: {\n    type: {\n      type: String,\n      required: true,\n      default: 'line',\n      validator: value => {\n        return ['line', 'pie', 'doughnut', 'bar'].indexOf(value) !== -1\n      }\n    },\n    data: {\n      type: Object,\n      required: true,\n      default: () => ({})\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props) {\n    const chartRef = ref()\n    const init = () => {\n      const canvas = chartRef.value?.getContext('2d')\n      const chart = new Chart(canvas, {\n        type: props.type,\n        data: $h.toRaw(props.data),\n        options: props.options\n      })\n\n      watch(props, () => {\n        chart.data = $h.toRaw(props.data)\n        chart.options = props.options\n        chart.update()\n      })\n\n      // Attach ChartJs instance\n      chartRef.value.instance = chart\n    }\n\n    const setSize = () => {\n      if (props.width) {\n        cash(chartRef.value).attr({\n          width: props.width\n        })\n      }\n\n      if (props.height) {\n        cash(chartRef.value).attr({\n          height: props.height\n        })\n      }\n    }\n\n    const bindInstance = () => {\n      if (props.refKey) {\n        const bind = inject(`bind[${props.refKey}]`)\n        if (bind) {\n          bind(chartRef.value)\n        }\n      }\n    }\n\n    onMounted(() => {\n      bindInstance()\n      setSize()\n      init()\n    })\n\n    return {\n      chartRef\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}