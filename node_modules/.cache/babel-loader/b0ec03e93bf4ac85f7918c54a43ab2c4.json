{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport { defineComponent, onMounted, computed, ref, provide } from 'vue';\nexport default defineComponent({\n  props: {\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    }\n  },\n  setup: function setup() {\n    var reportBarChartRef = ref();\n    provide('bind[reportBarChartRef]', function (el) {\n      reportBarChartRef.value = el;\n    }); // Fake visitor data\n\n    var reportBarChartData = new Array(40).fill(0).map(function (data, key) {\n      if (key % 3 == 0 || key % 5 == 0) {\n        return Math.ceil(Math.random() * (0 - 20) + 20);\n      } else {\n        return Math.ceil(Math.random() * (0 - 7) + 7);\n      }\n    }); // Fake visitor bar color\n\n    var reportBarChartColor = reportBarChartData.map(function (data) {\n      if (data >= 8 && data <= 14) {\n        return '#1c3faaa6';\n      } else if (data >= 15) {\n        return '#1C3FAA';\n      }\n\n      return '#1c3faa59';\n    });\n    var data = computed(function () {\n      return {\n        labels: reportBarChartData,\n        datasets: [{\n          label: 'Html Template',\n          barPercentage: 0.5,\n          barThickness: 6,\n          maxBarThickness: 8,\n          minBarLength: 2,\n          data: reportBarChartData,\n          backgroundColor: reportBarChartColor\n        }]\n      };\n    });\n    var options = computed(function () {\n      return {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [{\n            ticks: {\n              display: false\n            },\n            gridLines: {\n              display: false\n            }\n          }],\n          yAxes: [{\n            ticks: {\n              display: false\n            },\n            gridLines: {\n              display: false\n            }\n          }]\n        }\n      };\n    });\n    onMounted(function () {\n      setInterval(function () {\n        var chartInstance = reportBarChartRef.value.instance;\n        var chartConfig = chartInstance.config; // Swap visitor data\n\n        var newData = chartConfig.data.datasets[0].data[0];\n        chartConfig.data.datasets[0].data.shift();\n        chartConfig.data.datasets[0].data.push(newData);\n        chartInstance.update(); // Swap visitor bar color\n\n        var newColor = chartConfig.data.datasets[0].backgroundColor[0];\n        chartConfig.data.datasets[0].backgroundColor.shift();\n        chartConfig.data.datasets[0].backgroundColor.push(newColor);\n        chartInstance.update();\n      }, 1000);\n    });\n    return {\n      data: data,\n      options: options\n    };\n  }\n});","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\components\\report-bar-chart\\Main.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <Chart\n    type=\"bar\"\n    :width=\"width\"\n    :height=\"height\"\n    :data=\"data\"\n    :options=\"options\"\n    ref-key=\"reportBarChartRef\"\n  />\n</template>\n\n<script>\nimport { defineComponent, onMounted, computed, ref, provide } from 'vue'\n\nexport default defineComponent({\n  props: {\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    }\n  },\n  setup() {\n    const reportBarChartRef = ref()\n\n    provide('bind[reportBarChartRef]', el => {\n      reportBarChartRef.value = el\n    })\n\n    // Fake visitor data\n    const reportBarChartData = new Array(40).fill(0).map((data, key) => {\n      if (key % 3 == 0 || key % 5 == 0) {\n        return Math.ceil(Math.random() * (0 - 20) + 20)\n      } else {\n        return Math.ceil(Math.random() * (0 - 7) + 7)\n      }\n    })\n    // Fake visitor bar color\n    const reportBarChartColor = reportBarChartData.map(data => {\n      if (data >= 8 && data <= 14) {\n        return '#1c3faaa6'\n      } else if (data >= 15) {\n        return '#1C3FAA'\n      }\n\n      return '#1c3faa59'\n    })\n    const data = computed(() => {\n      return {\n        labels: reportBarChartData,\n        datasets: [\n          {\n            label: 'Html Template',\n            barPercentage: 0.5,\n            barThickness: 6,\n            maxBarThickness: 8,\n            minBarLength: 2,\n            data: reportBarChartData,\n            backgroundColor: reportBarChartColor\n          }\n        ]\n      }\n    })\n    const options = computed(() => {\n      return {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                display: false\n              },\n              gridLines: {\n                display: false\n              }\n            }\n          ],\n          yAxes: [\n            {\n              ticks: {\n                display: false\n              },\n              gridLines: {\n                display: false\n              }\n            }\n          ]\n        }\n      }\n    })\n\n    onMounted(() => {\n      setInterval(() => {\n        const chartInstance = reportBarChartRef.value.instance\n        const chartConfig = chartInstance.config\n\n        // Swap visitor data\n        const newData = chartConfig.data.datasets[0].data[0]\n        chartConfig.data.datasets[0].data.shift()\n        chartConfig.data.datasets[0].data.push(newData)\n        chartInstance.update()\n\n        // Swap visitor bar color\n        const newColor = chartConfig.data.datasets[0].backgroundColor[0]\n        chartConfig.data.datasets[0].backgroundColor.shift()\n        chartConfig.data.datasets[0].backgroundColor.push(newColor)\n        chartInstance.update()\n      }, 1000)\n    })\n\n    return {\n      data,\n      options\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}