{"ast":null,"code":"import _asyncToGenerator from \"D:/Apteka Vue/Pharmacy-main/Pharmacy-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport \"regenerator-runtime/runtime.js\";\nimport { watch } from 'vue';\n\nvar init = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(el, editorBuild, _ref) {\n    var props, emit, cacheData, editor;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            props = _ref.props, emit = _ref.emit, cacheData = _ref.cacheData;\n            // Initial data\n            cacheData = props.modelValue;\n            props.config.initialData = props.modelValue; // Init CKEditor\n\n            _context.next = 5;\n            return editorBuild.create(el, props.config);\n\n          case 5:\n            editor = _context.sent;\n            // Attach CKEditor instance\n            el.CKEditor = editor; // Set initial disabled state\n\n            editor.isReadOnly = props.disabled; // Set on change event\n\n            editor.model.document.on('change:data', function () {\n              var data = editor.getData();\n              cacheData = data;\n              emit('update:modelValue', data);\n            }); // Set on focus event\n\n            editor.editing.view.document.on('focus', function (evt) {\n              emit('focus', evt, editor);\n            }); // Set on blur event\n\n            editor.editing.view.document.on('blur', function (evt) {\n              emit('blur', evt, editor);\n            }); // Set on ready event\n\n            emit('ready', editor); // Watch model change\n\n            watch(props, function () {\n              if (cacheData !== props.modelValue) {\n                el.CKEditor.setData(props.modelValue);\n              }\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexport { init };","map":{"version":3,"sources":["D:/Apteka Vue/Pharmacy-main/Pharmacy-main/src/global-components/ckeditor/index.js"],"names":["watch","init","el","editorBuild","props","emit","cacheData","modelValue","config","initialData","create","editor","CKEditor","isReadOnly","disabled","model","document","on","data","getData","editing","view","evt","setData"],"mappings":";;AAAA,SAASA,KAAT,QAAsB,KAAtB;;AAEA,IAAMC,IAAI;AAAA,sEAAG,iBAAOC,EAAP,EAAWC,WAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0BC,YAAAA,KAA1B,QAA0BA,KAA1B,EAAiCC,IAAjC,QAAiCA,IAAjC,EAAuCC,SAAvC,QAAuCA,SAAvC;AACX;AACAA,YAAAA,SAAS,GAAGF,KAAK,CAACG,UAAlB;AACAH,YAAAA,KAAK,CAACI,MAAN,CAAaC,WAAb,GAA2BL,KAAK,CAACG,UAAjC,CAHW,CAKX;;AALW;AAAA,mBAMUJ,WAAW,CAACO,MAAZ,CAAmBR,EAAnB,EAAuBE,KAAK,CAACI,MAA7B,CANV;;AAAA;AAMLG,YAAAA,MANK;AAQX;AACAT,YAAAA,EAAE,CAACU,QAAH,GAAcD,MAAd,CATW,CAWX;;AACAA,YAAAA,MAAM,CAACE,UAAP,GAAoBT,KAAK,CAACU,QAA1B,CAZW,CAcX;;AACAH,YAAAA,MAAM,CAACI,KAAP,CAAaC,QAAb,CAAsBC,EAAtB,CAAyB,aAAzB,EAAwC,YAAM;AAC5C,kBAAMC,IAAI,GAAGP,MAAM,CAACQ,OAAP,EAAb;AACAb,cAAAA,SAAS,GAAGY,IAAZ;AACAb,cAAAA,IAAI,CAAC,mBAAD,EAAsBa,IAAtB,CAAJ;AACD,aAJD,EAfW,CAqBX;;AACAP,YAAAA,MAAM,CAACS,OAAP,CAAeC,IAAf,CAAoBL,QAApB,CAA6BC,EAA7B,CAAgC,OAAhC,EAAyC,UAAAK,GAAG,EAAI;AAC9CjB,cAAAA,IAAI,CAAC,OAAD,EAAUiB,GAAV,EAAeX,MAAf,CAAJ;AACD,aAFD,EAtBW,CA0BX;;AACAA,YAAAA,MAAM,CAACS,OAAP,CAAeC,IAAf,CAAoBL,QAApB,CAA6BC,EAA7B,CAAgC,MAAhC,EAAwC,UAAAK,GAAG,EAAI;AAC7CjB,cAAAA,IAAI,CAAC,MAAD,EAASiB,GAAT,EAAcX,MAAd,CAAJ;AACD,aAFD,EA3BW,CA+BX;;AACAN,YAAAA,IAAI,CAAC,OAAD,EAAUM,MAAV,CAAJ,CAhCW,CAkCX;;AACAX,YAAAA,KAAK,CAACI,KAAD,EAAQ,YAAM;AACjB,kBAAIE,SAAS,KAAKF,KAAK,CAACG,UAAxB,EAAoC;AAClCL,gBAAAA,EAAE,CAACU,QAAH,CAAYW,OAAZ,CAAoBnB,KAAK,CAACG,UAA1B;AACD;AACF,aAJI,CAAL;;AAnCW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAJN,IAAI;AAAA;AAAA;AAAA,GAAV;;AA0CA,SAASA,IAAT","sourcesContent":["import { watch } from 'vue'\n\nconst init = async (el, editorBuild, { props, emit, cacheData }) => {\n  // Initial data\n  cacheData = props.modelValue\n  props.config.initialData = props.modelValue\n\n  // Init CKEditor\n  const editor = await editorBuild.create(el, props.config)\n\n  // Attach CKEditor instance\n  el.CKEditor = editor\n\n  // Set initial disabled state\n  editor.isReadOnly = props.disabled\n\n  // Set on change event\n  editor.model.document.on('change:data', () => {\n    const data = editor.getData()\n    cacheData = data\n    emit('update:modelValue', data)\n  })\n\n  // Set on focus event\n  editor.editing.view.document.on('focus', evt => {\n    emit('focus', evt, editor)\n  })\n\n  // Set on blur event\n  editor.editing.view.document.on('blur', evt => {\n    emit('blur', evt, editor)\n  })\n\n  // Set on ready event\n  emit('ready', editor)\n\n  // Watch model change\n  watch(props, () => {\n    if (cacheData !== props.modelValue) {\n      el.CKEditor.setData(props.modelValue)\n    }\n  })\n}\n\nexport { init }\n"]},"metadata":{},"sourceType":"module"}