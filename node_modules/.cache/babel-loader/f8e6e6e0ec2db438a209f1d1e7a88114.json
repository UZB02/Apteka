{"ast":null,"code":"import { defineComponent, reactive, toRefs } from 'vue';\nimport { required, minLength, maxLength, email, url, integer } from '@vuelidate/validators';\nimport { useVuelidate } from '@vuelidate/core';\nimport Toastify from 'toastify-js';\nexport default defineComponent({\n  setup: function setup() {\n    var formData = reactive({\n      name: '',\n      email: '',\n      password: '',\n      age: '',\n      url: '',\n      comment: ''\n    });\n    var rules = {\n      name: {\n        required: required,\n        minLength: minLength(2)\n      },\n      email: {\n        required: required,\n        email: email\n      },\n      password: {\n        required: required,\n        minLength: minLength(6)\n      },\n      age: {\n        required: required,\n        integer: integer,\n        maxLength: maxLength(3)\n      },\n      url: {\n        url: url\n      },\n      comment: {\n        required: required,\n        minLength: minLength(10)\n      }\n    };\n    var validate = useVuelidate(rules, toRefs(formData));\n\n    var save = function save() {\n      validate.value.$touch();\n\n      if (validate.value.$invalid) {\n        Toastify({\n          node: cash('#failed-notification-content').clone().removeClass('hidden')[0],\n          duration: 3000,\n          newWindow: true,\n          close: true,\n          gravity: 'top',\n          position: 'right',\n          stopOnFocus: true\n        }).showToast();\n      } else {\n        Toastify({\n          node: cash('#success-notification-content').clone().removeClass('hidden')[0],\n          duration: 3000,\n          newWindow: true,\n          close: true,\n          gravity: 'top',\n          position: 'right',\n          stopOnFocus: true\n        }).showToast();\n      }\n    };\n\n    return {\n      validate: validate,\n      formData: formData,\n      save: save\n    };\n  }\n});","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\views\\validation\\Main.vue"],"names":[],"mappings":"AAyUA,SAAS,eAAT,EAA0B,QAA1B,EAAoC,MAApC,QAAkD,KAAlD;AACA,SACE,QADF,EAEE,SAFF,EAGE,SAHF,EAIE,KAJF,EAKE,GALF,EAME,OANF,QAOO,uBAPP;AAQA,SAAS,YAAT,QAA6B,iBAA7B;AACA,OAAO,QAAP,MAAqB,aAArB;AAEA,eAAe,eAAe,CAAC;AAC7B,EAAA,KAD6B,mBACrB;AACN,QAAM,QAAO,GAAI,QAAQ,CAAC;AACxB,MAAA,IAAI,EAAE,EADkB;AAExB,MAAA,KAAK,EAAE,EAFiB;AAGxB,MAAA,QAAQ,EAAE,EAHc;AAIxB,MAAA,GAAG,EAAE,EAJmB;AAKxB,MAAA,GAAG,EAAE,EALmB;AAMxB,MAAA,OAAO,EAAE;AANe,KAAD,CAAzB;AAQA,QAAM,KAAI,GAAI;AACZ,MAAA,IAAI,EAAE;AACJ,QAAA,QAAQ,EAAR,QADI;AAEJ,QAAA,SAAS,EAAE,SAAS,CAAC,CAAD;AAFhB,OADM;AAKZ,MAAA,KAAK,EAAE;AACL,QAAA,QAAQ,EAAR,QADK;AAEL,QAAA,KAAI,EAAJ;AAFK,OALK;AASZ,MAAA,QAAQ,EAAE;AACR,QAAA,QAAQ,EAAR,QADQ;AAER,QAAA,SAAS,EAAE,SAAS,CAAC,CAAD;AAFZ,OATE;AAaZ,MAAA,GAAG,EAAE;AACH,QAAA,QAAQ,EAAR,QADG;AAEH,QAAA,OAAO,EAAP,OAFG;AAGH,QAAA,SAAS,EAAE,SAAS,CAAC,CAAD;AAHjB,OAbO;AAkBZ,MAAA,GAAG,EAAE;AACH,QAAA,GAAE,EAAF;AADG,OAlBO;AAqBZ,MAAA,OAAO,EAAE;AACP,QAAA,QAAQ,EAAR,QADO;AAEP,QAAA,SAAS,EAAE,SAAS,CAAC,EAAD;AAFb;AArBG,KAAd;AA0BA,QAAM,QAAO,GAAI,YAAY,CAAC,KAAD,EAAQ,MAAM,CAAC,QAAD,CAAd,CAA7B;;AACA,QAAM,IAAG,GAAI,SAAP,IAAO,GAAM;AACjB,MAAA,QAAQ,CAAC,KAAT,CAAe,MAAf;;AACA,UAAI,QAAQ,CAAC,KAAT,CAAe,QAAnB,EAA6B;AAC3B,QAAA,QAAQ,CAAC;AACP,UAAA,IAAI,EAAE,IAAI,CAAC,8BAAD,CAAJ,CACH,KADG,GAEH,WAFG,CAES,QAFT,EAEmB,CAFnB,CADC;AAIP,UAAA,QAAQ,EAAE,IAJH;AAKP,UAAA,SAAS,EAAE,IALJ;AAMP,UAAA,KAAK,EAAE,IANA;AAOP,UAAA,OAAO,EAAE,KAPF;AAQP,UAAA,QAAQ,EAAE,OARH;AASP,UAAA,WAAW,EAAE;AATN,SAAD,CAAR,CAUG,SAVH;AAWF,OAZA,MAYO;AACL,QAAA,QAAQ,CAAC;AACP,UAAA,IAAI,EAAE,IAAI,CAAC,+BAAD,CAAJ,CACH,KADG,GAEH,WAFG,CAES,QAFT,EAEmB,CAFnB,CADC;AAIP,UAAA,QAAQ,EAAE,IAJH;AAKP,UAAA,SAAS,EAAE,IALJ;AAMP,UAAA,KAAK,EAAE,IANA;AAOP,UAAA,OAAO,EAAE,KAPF;AAQP,UAAA,QAAQ,EAAE,OARH;AASP,UAAA,WAAW,EAAE;AATN,SAAD,CAAR,CAUG,SAVH;AAWF;AACF,KA3BA;;AA6BA,WAAO;AACL,MAAA,QAAQ,EAAR,QADK;AAEL,MAAA,QAAQ,EAAR,QAFK;AAGL,MAAA,IAAG,EAAH;AAHK,KAAP;AAKF;AAvE6B,CAAD,CAA9B","sourcesContent":["<template>\n  <div>\n    <div class=\"intro-y flex items-center mt-8\">\n      <h2 class=\"text-lg font-medium mr-auto\">Form Validation</h2>\n    </div>\n    <div class=\"grid grid-cols-12 gap-6 mt-5\">\n      <div class=\"intro-y col-span-12 lg:col-span-6\">\n        <!-- BEGIN: Form Validation -->\n        <div class=\"intro-y box\">\n          <div\n            class=\"flex flex-col sm:flex-row items-center p-5 border-b border-gray-200 dark:border-dark-5\"\n          >\n            <h2 class=\"font-medium text-base mr-auto\">Implementation</h2>\n            <div\n              class=\"w-full sm:w-auto flex items-center sm:ml-auto mt-3 sm:mt-0\"\n            >\n              <label class=\"form-check-label ml-0 sm:ml-2\" for=\"show-example-1\"\n                >Show example code</label\n              >\n              <input\n                id=\"show-example-1\"\n                data-target=\"#form-validation\"\n                class=\"show-code form-check-switch mr-0 ml-3\"\n                type=\"checkbox\"\n              />\n            </div>\n          </div>\n          <div id=\"form-validation\" class=\"p-5\">\n            <div class=\"preview\">\n              <!-- BEGIN: Validation Form -->\n              <form class=\"validate-form\" @submit.prevent=\"save\">\n                <div class=\"input-form\">\n                  <label\n                    for=\"validation-form-1\"\n                    class=\"form-label w-full flex flex-col sm:flex-row\"\n                  >\n                    Name\n                    <span class=\"sm:ml-auto mt-1 sm:mt-0 text-xs text-gray-600\"\n                      >Required, at least 2 characters</span\n                    >\n                  </label>\n                  <input\n                    id=\"validation-form-1\"\n                    v-model.trim=\"validate.name.$model\"\n                    type=\"text\"\n                    name=\"name\"\n                    class=\"form-control\"\n                    :class=\"{ 'border-theme-6': validate.name.$error }\"\n                    placeholder=\"John Legend\"\n                  />\n                  <template v-if=\"validate.name.$error\">\n                    <div\n                      v-for=\"(error, index) in validate.name.$errors\"\n                      :key=\"index\"\n                      class=\"text-theme-6 mt-2\"\n                    >\n                      {{ error.$message }}\n                    </div>\n                  </template>\n                </div>\n                <div class=\"input-form mt-3\">\n                  <label\n                    for=\"validation-form-2\"\n                    class=\"form-label w-full flex flex-col sm:flex-row\"\n                  >\n                    Email\n                    <span class=\"sm:ml-auto mt-1 sm:mt-0 text-xs text-gray-600\"\n                      >Required, email address format</span\n                    >\n                  </label>\n                  <input\n                    id=\"validation-form-2\"\n                    v-model.trim=\"validate.email.$model\"\n                    type=\"email\"\n                    name=\"email\"\n                    class=\"form-control\"\n                    :class=\"{ 'border-theme-6': validate.email.$error }\"\n                    placeholder=\"example@gmail.com\"\n                  />\n                  <template v-if=\"validate.email.$error\">\n                    <div\n                      v-for=\"(error, index) in validate.email.$errors\"\n                      :key=\"index\"\n                      class=\"text-theme-6 mt-2\"\n                    >\n                      {{ error.$message }}\n                    </div>\n                  </template>\n                </div>\n                <div class=\"input-form mt-3\">\n                  <label\n                    for=\"validation-form-3\"\n                    class=\"form-label w-full flex flex-col sm:flex-row\"\n                  >\n                    Password\n                    <span class=\"sm:ml-auto mt-1 sm:mt-0 text-xs text-gray-600\"\n                      >Required, at least 6 characters</span\n                    >\n                  </label>\n                  <input\n                    id=\"validation-form-3\"\n                    v-model.trim=\"validate.password.$model\"\n                    type=\"password\"\n                    name=\"password\"\n                    class=\"form-control\"\n                    :class=\"{ 'border-theme-6': validate.password.$error }\"\n                    placeholder=\"secret\"\n                  />\n                  <template v-if=\"validate.password.$error\">\n                    <div\n                      v-for=\"(error, index) in validate.password.$errors\"\n                      :key=\"index\"\n                      class=\"text-theme-6 mt-2\"\n                    >\n                      {{ error.$message }}\n                    </div>\n                  </template>\n                </div>\n                <div class=\"input-form mt-3\">\n                  <label\n                    for=\"validation-form-4\"\n                    class=\"form-label w-full flex flex-col sm:flex-row\"\n                  >\n                    Age\n                    <span class=\"sm:ml-auto mt-1 sm:mt-0 text-xs text-gray-600\"\n                      >Required, integer only & maximum 3 characters</span\n                    >\n                  </label>\n                  <input\n                    id=\"validation-form-4\"\n                    v-model.trim=\"validate.age.$model\"\n                    type=\"number\"\n                    name=\"age\"\n                    class=\"form-control\"\n                    :class=\"{ 'border-theme-6': validate.age.$error }\"\n                    placeholder=\"21\"\n                  />\n                  <template v-if=\"validate.age.$error\">\n                    <div\n                      v-for=\"(error, index) in validate.age.$errors\"\n                      :key=\"index\"\n                      class=\"text-theme-6 mt-2\"\n                    >\n                      {{ error.$message }}\n                    </div>\n                  </template>\n                </div>\n                <div class=\"input-form mt-3\">\n                  <label\n                    for=\"validation-form-5\"\n                    class=\"form-label w-full flex flex-col sm:flex-row\"\n                  >\n                    Profile URL\n                    <span class=\"sm:ml-auto mt-1 sm:mt-0 text-xs text-gray-600\"\n                      >Optional, URL format</span\n                    >\n                  </label>\n                  <input\n                    id=\"validation-form-5\"\n                    v-model.trim=\"validate.url.$model\"\n                    type=\"url\"\n                    name=\"url\"\n                    class=\"form-control\"\n                    :class=\"{ 'border-theme-6': validate.url.$error }\"\n                    placeholder=\"https://google.com\"\n                  />\n                  <template v-if=\"validate.url.$error\">\n                    <div\n                      v-for=\"(error, index) in validate.url.$errors\"\n                      :key=\"index\"\n                      class=\"text-theme-6 mt-2\"\n                    >\n                      {{ error.$message }}\n                    </div>\n                  </template>\n                </div>\n                <div class=\"input-form mt-3\">\n                  <label\n                    for=\"validation-form-6\"\n                    class=\"form-label w-full flex flex-col sm:flex-row\"\n                  >\n                    Comment\n                    <span class=\"sm:ml-auto mt-1 sm:mt-0 text-xs text-gray-600\"\n                      >Required, at least 10 characters</span\n                    >\n                  </label>\n                  <textarea\n                    id=\"validation-form-6\"\n                    v-model.trim=\"validate.comment.$model\"\n                    class=\"form-control\"\n                    :class=\"{ 'border-theme-6': validate.comment.$error }\"\n                    name=\"comment\"\n                    placeholder=\"Type your comments\"\n                  ></textarea>\n                  <template v-if=\"validate.comment.$error\">\n                    <div\n                      v-for=\"(error, index) in validate.comment.$errors\"\n                      :key=\"index\"\n                      class=\"text-theme-6 mt-2\"\n                    >\n                      {{ error.$message }}\n                    </div>\n                  </template>\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary mt-5\">\n                  Register\n                </button>\n              </form>\n              <!-- END: Validation Form -->\n              <!-- BEGIN: Success Notification Content -->\n              <div\n                id=\"success-notification-content\"\n                class=\"toastify-content hidden flex\"\n              >\n                <CheckCircleIcon class=\"text-theme-9\" />\n                <div class=\"ml-4 mr-4\">\n                  <div class=\"font-medium\">Registration success!</div>\n                  <div class=\"text-gray-600 mt-1\">\n                    Please check your e-mail for further info!\n                  </div>\n                </div>\n              </div>\n              <!-- END: Success Notification Content -->\n              <!-- BEGIN: Failed Notification Content -->\n              <div\n                id=\"failed-notification-content\"\n                class=\"toastify-content hidden flex\"\n              >\n                <XCircleIcon class=\"text-theme-6\" />\n                <div class=\"ml-4 mr-4\">\n                  <div class=\"font-medium\">Registration failed!</div>\n                  <div class=\"text-gray-600 mt-1\">\n                    Please check the fileld form.\n                  </div>\n                </div>\n              </div>\n              <!-- END: Failed Notification Content -->\n            </div>\n            <div class=\"source-code hidden\">\n              <button\n                data-target=\"#copy-form-validation\"\n                class=\"copy-code btn py-1 px-2 btn-outline-secondary\"\n              >\n                <FileIcon class=\"w-4 h-4 mr-2\" /> Copy example code\n              </button>\n              <div class=\"overflow-y-auto mt-3 rounded-md\">\n                <Highlight id=\"copy-form-validation\" class=\"source-preview\">\n                  <code\n                    class=\"text-xs p-0 rounded-md html pl-5 pt-8 pb-4 -mb-10 -mt-10\"\n                  >\n                    <textarea>\n                      const formData = reactive({\n                        name: \"\",\n                        email: \"\",\n                        password: \"\",\n                        age: \"\",\n                        url: \"\",\n                        comment: \"\"\n                      });\n                      const rules = {\n                        name: {\n                          required,\n                          minLength: minLength(2)\n                        },\n                        email: {\n                          required,\n                          email\n                        },\n                        password: {\n                          required,\n                          minLength: minLength(6)\n                        },\n                        age: {\n                          required,\n                          integer,\n                          maxLength: maxLength(3)\n                        },\n                        url: {\n                          url\n                        },\n                        comment: {\n                          required,\n                          minLength: minLength(10)\n                        }\n                      };\n                      const validate = useVuelidate(rules, toRefs(formData));\n                      const save = () => {\n                        validate.value.$touch();\n                        console.log(validate.value);\n                        if (validate.value.$invalid) {\n                          Toastify({\n                            text: \"Registration failed, please check the fileld form.\",\n                            duration: 3000,\n                            newWindow: true,\n                            close: true,\n                            gravity: \"top\",\n                            position: \"right\",\n                            backgroundColor: \"#D32929\",\n                            stopOnFocus: true,\n                            className: \"toastify-content\"\n                          }).showToast();\n                        } else {\n                          Toastify({\n                            text: \"Registration success!\",\n                            duration: 3000,\n                            newWindow: true,\n                            close: true,\n                            gravity: \"top\",\n                            position: \"right\",\n                            backgroundColor: \"#91C714\",\n                            stopOnFocus: true,\n                            className: \"toastify-content\"\n                          }).showToast();\n                        }\n                      };\n                    </textarea>\n                  </code>\n                </Highlight>\n              </div>\n            </div>\n          </div>\n        </div>\n        <!-- END: Form Validation -->\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { defineComponent, reactive, toRefs } from 'vue'\nimport {\n  required,\n  minLength,\n  maxLength,\n  email,\n  url,\n  integer\n} from '@vuelidate/validators'\nimport { useVuelidate } from '@vuelidate/core'\nimport Toastify from 'toastify-js'\n\nexport default defineComponent({\n  setup() {\n    const formData = reactive({\n      name: '',\n      email: '',\n      password: '',\n      age: '',\n      url: '',\n      comment: ''\n    })\n    const rules = {\n      name: {\n        required,\n        minLength: minLength(2)\n      },\n      email: {\n        required,\n        email\n      },\n      password: {\n        required,\n        minLength: minLength(6)\n      },\n      age: {\n        required,\n        integer,\n        maxLength: maxLength(3)\n      },\n      url: {\n        url\n      },\n      comment: {\n        required,\n        minLength: minLength(10)\n      }\n    }\n    const validate = useVuelidate(rules, toRefs(formData))\n    const save = () => {\n      validate.value.$touch()\n      if (validate.value.$invalid) {\n        Toastify({\n          node: cash('#failed-notification-content')\n            .clone()\n            .removeClass('hidden')[0],\n          duration: 3000,\n          newWindow: true,\n          close: true,\n          gravity: 'top',\n          position: 'right',\n          stopOnFocus: true\n        }).showToast()\n      } else {\n        Toastify({\n          node: cash('#success-notification-content')\n            .clone()\n            .removeClass('hidden')[0],\n          duration: 3000,\n          newWindow: true,\n          close: true,\n          gravity: 'top',\n          position: 'right',\n          stopOnFocus: true\n        }).showToast()\n      }\n    }\n\n    return {\n      validate,\n      formData,\n      save\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}