{"ast":null,"code":"import { renderSlot as _renderSlot, resolveDirective as _resolveDirective, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  class: \"tom-select\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_select = _resolveDirective(\"select\");\n\n  return _withDirectives((_openBlock(), _createElementBlock(\"select\", _hoisted_1, [_renderSlot(_ctx.$slots, \"default\")], 512\n  /* NEED_PATCH */\n  )), [[_directive_select, {\n    props: _ctx.props,\n    emit: _ctx.emit,\n    computedOptions: _ctx.computedOptions\n  }]]);\n}","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\tom-select\\Main.vue"],"names":[],"mappings":";;AACsD,EAAA,KAAK,EAAC;;;;;wCAA1D,mBAAA,CAES,QAFT,EAAA,UAAA,EAES,CADP,WAAA,CAAa,IAAA,CAAA,MAAb,EAAa,SAAb,CACO,CAFT,E;;AAAA,G;WAAoB,IAAA,CAAA,K;AAAK,IAAA,IAAA,EAAE,IAAA,CAAA,I;AAAI,IAAA,eAAA,EAAE,IAAA,CAAA","sourcesContent":["<template>\n  <select v-select=\"{ props, emit, computedOptions }\" class=\"tom-select\">\n    <slot></slot>\n  </select>\n</template>\n\n<script>\nimport { defineComponent, computed, watch } from 'vue'\nimport { setValue, init, reInit } from './index'\n\nexport default defineComponent({\n  directives: {\n    select: {\n      mounted(el, { value }) {\n        // Clone the select element to prevent tom select remove the original element\n        const clonedEl = cash(el)\n          .clone()\n          .insertAfter(el)[0]\n        cash(el).attr('hidden', true)\n\n        // Initialize tom select\n        setValue(clonedEl, value.props)\n        init(clonedEl, value.emit, value.computedOptions)\n      },\n      updated(el, { value }) {\n        const clonedEl = cash(el).next()[0]\n        setValue(clonedEl, value.props)\n        reInit(clonedEl, value.props, value.emit, value.computedOptions)\n      }\n    }\n  },\n  props: {\n    options: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    modelValue: {\n      type: [String, Number, Array],\n      default: ''\n    }\n  },\n  setup(props, context) {\n    // Compute all default options\n    const computedOptions = computed(() => {\n      let options = {\n        ...props.options,\n        plugins: {\n          dropdown_input: {},\n          ...props.options.plugins\n        }\n      }\n\n      if (Array.isArray(props.modelValue)) {\n        options = {\n          persist: false,\n          create: true,\n          onDelete: function(values) {\n            return confirm(\n              values.length > 1\n                ? 'Are you sure you want to remove these ' +\n                    values.length +\n                    ' items?'\n                : 'Are you sure you want to remove \"' + values[0] + '\"?'\n            )\n          },\n          ...options,\n          plugins: {\n            remove_button: {\n              title: 'Remove this item'\n            },\n            ...options.plugins\n          }\n        }\n      }\n\n      return options\n    })\n\n    // Watch value change\n    watch(\n      computed(() => props.modelValue),\n      () => {\n        context.emit('change')\n      }\n    )\n\n    return {\n      props,\n      ...context,\n      computedOptions\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}