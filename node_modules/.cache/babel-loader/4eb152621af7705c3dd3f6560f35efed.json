{"ast":null,"code":"import { resolveDynamicComponent as _resolveDynamicComponent, resolveDirective as _resolveDirective, openBlock as _openBlock, createBlock as _createBlock, withDirectives as _withDirectives } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _directive_editor = _resolveDirective(\"editor\");\n\n  return _withDirectives((_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.tagName), {\n    ref: \"editorRef\",\n    class: \"select\"\n  }, null, 512\n  /* NEED_PATCH */\n  )), [[_directive_editor, {\n    props: _ctx.props,\n    emit: _ctx.emit,\n    cacheData: _ctx.cacheData\n  }]]);\n}","map":{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\global-components\\ckeditor\\ClassicEditor.vue"],"names":[],"mappings":";;;;wCACE,YAAA,CAKa,wBAAA,CAJN,IAAA,CAAA,OAIM,CALb,EACc;AACZ,IAAA,GAAG,EAAC,WADQ;AAGZ,IAAA,KAAK,EAAC;AAHM,GADd,E,IAAA,E;;AAAA,G;WAGc,IAAA,CAAA,K;AAAK,IAAA,IAAA,EAAE,IAAA,CAAA,I;AAAI,IAAA,SAAA,EAAE,IAAA,CAAA","sourcesContent":["<template>\n  <component\n    :is=\"tagName\"\n    ref=\"editorRef\"\n    v-editor=\"{ props, emit, cacheData }\"\n    class=\"select\"\n  ></component>\n</template>\n\n<script>\nimport { defineComponent, inject, onMounted, ref } from 'vue'\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic'\nimport { init } from './index'\n\nexport default defineComponent({\n  directives: {\n    editor: {\n      mounted(el, { value }) {\n        init(el, ClassicEditor, value)\n      }\n    }\n  },\n  props: {\n    modelValue: {\n      type: String,\n      default: ''\n    },\n    config: {\n      type: Object,\n      default: () => ({})\n    },\n    tagName: {\n      type: String,\n      default: 'div'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    refKey: {\n      type: String,\n      default: null\n    }\n  },\n  setup(props, context) {\n    const editorRef = ref()\n    const cacheData = ref('')\n\n    const bindInstance = () => {\n      if (props.refKey) {\n        const bind = inject(`bind[${props.refKey}]`)\n        if (bind) {\n          bind(editorRef.value)\n        }\n      }\n    }\n\n    onMounted(() => {\n      bindInstance()\n    })\n\n    return {\n      props,\n      ...context,\n      cacheData,\n      editorRef\n    }\n  }\n})\n</script>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}