{"remainingRequest":"D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\node_modules\\vue-loader\\dist\\index.js??ruleSet[0].use[1]!D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\components\\report-bar-chart\\Main.vue?vue&type=template&id=86eeda86","dependencies":[{"path":"D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\components\\report-bar-chart\\Main.vue","mtime":1703608211363},{"path":"D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\node_modules\\babel-loader\\lib\\index.js","mtime":1703608333290},{"path":"D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\node_modules\\vue-loader\\dist\\templateLoader.js","mtime":1703608336250},{"path":"D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1703608331461},{"path":"D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\node_modules\\vue-loader\\dist\\index.js","mtime":1703608334745}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgPENoYXJ0CiAgICB0eXBlPSJiYXIiCiAgICA6d2lkdGg9IndpZHRoIgogICAgOmhlaWdodD0iaGVpZ2h0IgogICAgOmRhdGE9ImRhdGEiCiAgICA6b3B0aW9ucz0ib3B0aW9ucyIKICAgIHJlZi1rZXk9InJlcG9ydEJhckNoYXJ0UmVmIgogIC8+Cg=="},{"version":3,"sources":["D:\\Apteka Vue\\Pharmacy-main\\Pharmacy-main\\src\\components\\report-bar-chart\\Main.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,CAAC,CAAC;IACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACb,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC","file":"D:/Apteka Vue/Pharmacy-main/Pharmacy-main/src/components/report-bar-chart/Main.vue","sourceRoot":"","sourcesContent":["<template>\n  <Chart\n    type=\"bar\"\n    :width=\"width\"\n    :height=\"height\"\n    :data=\"data\"\n    :options=\"options\"\n    ref-key=\"reportBarChartRef\"\n  />\n</template>\n\n<script>\nimport { defineComponent, onMounted, computed, ref, provide } from 'vue'\n\nexport default defineComponent({\n  props: {\n    width: {\n      type: Number,\n      default: 0\n    },\n    height: {\n      type: Number,\n      default: 0\n    }\n  },\n  setup() {\n    const reportBarChartRef = ref()\n\n    provide('bind[reportBarChartRef]', el => {\n      reportBarChartRef.value = el\n    })\n\n    // Fake visitor data\n    const reportBarChartData = new Array(40).fill(0).map((data, key) => {\n      if (key % 3 == 0 || key % 5 == 0) {\n        return Math.ceil(Math.random() * (0 - 20) + 20)\n      } else {\n        return Math.ceil(Math.random() * (0 - 7) + 7)\n      }\n    })\n    // Fake visitor bar color\n    const reportBarChartColor = reportBarChartData.map(data => {\n      if (data >= 8 && data <= 14) {\n        return '#1c3faaa6'\n      } else if (data >= 15) {\n        return '#1C3FAA'\n      }\n\n      return '#1c3faa59'\n    })\n    const data = computed(() => {\n      return {\n        labels: reportBarChartData,\n        datasets: [\n          {\n            label: 'Html Template',\n            barPercentage: 0.5,\n            barThickness: 6,\n            maxBarThickness: 8,\n            minBarLength: 2,\n            data: reportBarChartData,\n            backgroundColor: reportBarChartColor\n          }\n        ]\n      }\n    })\n    const options = computed(() => {\n      return {\n        legend: {\n          display: false\n        },\n        scales: {\n          xAxes: [\n            {\n              ticks: {\n                display: false\n              },\n              gridLines: {\n                display: false\n              }\n            }\n          ],\n          yAxes: [\n            {\n              ticks: {\n                display: false\n              },\n              gridLines: {\n                display: false\n              }\n            }\n          ]\n        }\n      }\n    })\n\n    onMounted(() => {\n      setInterval(() => {\n        const chartInstance = reportBarChartRef.value.instance\n        const chartConfig = chartInstance.config\n\n        // Swap visitor data\n        const newData = chartConfig.data.datasets[0].data[0]\n        chartConfig.data.datasets[0].data.shift()\n        chartConfig.data.datasets[0].data.push(newData)\n        chartInstance.update()\n\n        // Swap visitor bar color\n        const newColor = chartConfig.data.datasets[0].backgroundColor[0]\n        chartConfig.data.datasets[0].backgroundColor.shift()\n        chartConfig.data.datasets[0].backgroundColor.push(newColor)\n        chartInstance.update()\n      }, 1000)\n    })\n\n    return {\n      data,\n      options\n    }\n  }\n})\n</script>\n"]}]}